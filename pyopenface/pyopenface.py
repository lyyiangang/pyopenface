# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyopenface', [dirname(__file__)])
        except ImportError:
            import _pyopenface
            return _pyopenface
        if fp is not None:
            try:
                _mod = imp.load_module('_pyopenface', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyopenface = swig_import_helper()
    del swig_import_helper
else:
    import _pyopenface
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyopenface.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pyopenface.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyopenface.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyopenface.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyopenface.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyopenface.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyopenface.SwigPyIterator_copy(self)

    def next(self):
        return _pyopenface.SwigPyIterator_next(self)

    def __next__(self):
        return _pyopenface.SwigPyIterator___next__(self)

    def previous(self):
        return _pyopenface.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyopenface.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyopenface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyopenface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyopenface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyopenface.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyopenface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyopenface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyopenface.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyopenface.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyopenface.IntVector___nonzero__(self)

    def __bool__(self):
        return _pyopenface.IntVector___bool__(self)

    def __len__(self):
        return _pyopenface.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pyopenface.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyopenface.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyopenface.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyopenface.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyopenface.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyopenface.IntVector___setitem__(self, *args)

    def pop(self):
        return _pyopenface.IntVector_pop(self)

    def append(self, x):
        return _pyopenface.IntVector_append(self, x)

    def empty(self):
        return _pyopenface.IntVector_empty(self)

    def size(self):
        return _pyopenface.IntVector_size(self)

    def swap(self, v):
        return _pyopenface.IntVector_swap(self, v)

    def begin(self):
        return _pyopenface.IntVector_begin(self)

    def end(self):
        return _pyopenface.IntVector_end(self)

    def rbegin(self):
        return _pyopenface.IntVector_rbegin(self)

    def rend(self):
        return _pyopenface.IntVector_rend(self)

    def clear(self):
        return _pyopenface.IntVector_clear(self)

    def get_allocator(self):
        return _pyopenface.IntVector_get_allocator(self)

    def pop_back(self):
        return _pyopenface.IntVector_pop_back(self)

    def erase(self, *args):
        return _pyopenface.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyopenface.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyopenface.IntVector_push_back(self, x)

    def front(self):
        return _pyopenface.IntVector_front(self)

    def back(self):
        return _pyopenface.IntVector_back(self)

    def assign(self, n, x):
        return _pyopenface.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pyopenface.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pyopenface.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pyopenface.IntVector_reserve(self, n)

    def capacity(self):
        return _pyopenface.IntVector_capacity(self)
    __swig_destroy__ = _pyopenface.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _pyopenface.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyopenface.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyopenface.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pyopenface.DoubleVector___bool__(self)

    def __len__(self):
        return _pyopenface.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pyopenface.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyopenface.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyopenface.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyopenface.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyopenface.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyopenface.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pyopenface.DoubleVector_pop(self)

    def append(self, x):
        return _pyopenface.DoubleVector_append(self, x)

    def empty(self):
        return _pyopenface.DoubleVector_empty(self)

    def size(self):
        return _pyopenface.DoubleVector_size(self)

    def swap(self, v):
        return _pyopenface.DoubleVector_swap(self, v)

    def begin(self):
        return _pyopenface.DoubleVector_begin(self)

    def end(self):
        return _pyopenface.DoubleVector_end(self)

    def rbegin(self):
        return _pyopenface.DoubleVector_rbegin(self)

    def rend(self):
        return _pyopenface.DoubleVector_rend(self)

    def clear(self):
        return _pyopenface.DoubleVector_clear(self)

    def get_allocator(self):
        return _pyopenface.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pyopenface.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pyopenface.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyopenface.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyopenface.DoubleVector_push_back(self, x)

    def front(self):
        return _pyopenface.DoubleVector_front(self)

    def back(self):
        return _pyopenface.DoubleVector_back(self)

    def assign(self, n, x):
        return _pyopenface.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pyopenface.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pyopenface.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pyopenface.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pyopenface.DoubleVector_capacity(self)
    __swig_destroy__ = _pyopenface.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _pyopenface.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyopenface.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyopenface.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pyopenface.FloatVector___bool__(self)

    def __len__(self):
        return _pyopenface.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _pyopenface.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyopenface.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyopenface.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyopenface.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyopenface.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyopenface.FloatVector___setitem__(self, *args)

    def pop(self):
        return _pyopenface.FloatVector_pop(self)

    def append(self, x):
        return _pyopenface.FloatVector_append(self, x)

    def empty(self):
        return _pyopenface.FloatVector_empty(self)

    def size(self):
        return _pyopenface.FloatVector_size(self)

    def swap(self, v):
        return _pyopenface.FloatVector_swap(self, v)

    def begin(self):
        return _pyopenface.FloatVector_begin(self)

    def end(self):
        return _pyopenface.FloatVector_end(self)

    def rbegin(self):
        return _pyopenface.FloatVector_rbegin(self)

    def rend(self):
        return _pyopenface.FloatVector_rend(self)

    def clear(self):
        return _pyopenface.FloatVector_clear(self)

    def get_allocator(self):
        return _pyopenface.FloatVector_get_allocator(self)

    def pop_back(self):
        return _pyopenface.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pyopenface.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyopenface.new_FloatVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyopenface.FloatVector_push_back(self, x)

    def front(self):
        return _pyopenface.FloatVector_front(self)

    def back(self):
        return _pyopenface.FloatVector_back(self)

    def assign(self, n, x):
        return _pyopenface.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pyopenface.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pyopenface.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pyopenface.FloatVector_reserve(self, n)

    def capacity(self):
        return _pyopenface.FloatVector_capacity(self)
    __swig_destroy__ = _pyopenface.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _pyopenface.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyopenface.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyopenface.StringVector___nonzero__(self)

    def __bool__(self):
        return _pyopenface.StringVector___bool__(self)

    def __len__(self):
        return _pyopenface.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _pyopenface.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyopenface.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyopenface.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyopenface.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyopenface.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyopenface.StringVector___setitem__(self, *args)

    def pop(self):
        return _pyopenface.StringVector_pop(self)

    def append(self, x):
        return _pyopenface.StringVector_append(self, x)

    def empty(self):
        return _pyopenface.StringVector_empty(self)

    def size(self):
        return _pyopenface.StringVector_size(self)

    def swap(self, v):
        return _pyopenface.StringVector_swap(self, v)

    def begin(self):
        return _pyopenface.StringVector_begin(self)

    def end(self):
        return _pyopenface.StringVector_end(self)

    def rbegin(self):
        return _pyopenface.StringVector_rbegin(self)

    def rend(self):
        return _pyopenface.StringVector_rend(self)

    def clear(self):
        return _pyopenface.StringVector_clear(self)

    def get_allocator(self):
        return _pyopenface.StringVector_get_allocator(self)

    def pop_back(self):
        return _pyopenface.StringVector_pop_back(self)

    def erase(self, *args):
        return _pyopenface.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyopenface.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyopenface.StringVector_push_back(self, x)

    def front(self):
        return _pyopenface.StringVector_front(self)

    def back(self):
        return _pyopenface.StringVector_back(self)

    def assign(self, n, x):
        return _pyopenface.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _pyopenface.StringVector_resize(self, *args)

    def insert(self, *args):
        return _pyopenface.StringVector_insert(self, *args)

    def reserve(self, n):
        return _pyopenface.StringVector_reserve(self, n)

    def capacity(self):
        return _pyopenface.StringVector_capacity(self)
    __swig_destroy__ = _pyopenface.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _pyopenface.StringVector_swigregister
StringVector_swigregister(StringVector)

class FaceModelParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaceModelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FaceModelParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_optimisation_iteration"] = _pyopenface.FaceModelParameters_num_optimisation_iteration_set
    __swig_getmethods__["num_optimisation_iteration"] = _pyopenface.FaceModelParameters_num_optimisation_iteration_get
    if _newclass:
        num_optimisation_iteration = _swig_property(_pyopenface.FaceModelParameters_num_optimisation_iteration_get, _pyopenface.FaceModelParameters_num_optimisation_iteration_set)
    __swig_setmethods__["limit_pose"] = _pyopenface.FaceModelParameters_limit_pose_set
    __swig_getmethods__["limit_pose"] = _pyopenface.FaceModelParameters_limit_pose_get
    if _newclass:
        limit_pose = _swig_property(_pyopenface.FaceModelParameters_limit_pose_get, _pyopenface.FaceModelParameters_limit_pose_set)
    __swig_setmethods__["validate_detections"] = _pyopenface.FaceModelParameters_validate_detections_set
    __swig_getmethods__["validate_detections"] = _pyopenface.FaceModelParameters_validate_detections_get
    if _newclass:
        validate_detections = _swig_property(_pyopenface.FaceModelParameters_validate_detections_get, _pyopenface.FaceModelParameters_validate_detections_set)
    __swig_setmethods__["validation_boundary"] = _pyopenface.FaceModelParameters_validation_boundary_set
    __swig_getmethods__["validation_boundary"] = _pyopenface.FaceModelParameters_validation_boundary_get
    if _newclass:
        validation_boundary = _swig_property(_pyopenface.FaceModelParameters_validation_boundary_get, _pyopenface.FaceModelParameters_validation_boundary_set)
    __swig_setmethods__["window_sizes_small"] = _pyopenface.FaceModelParameters_window_sizes_small_set
    __swig_getmethods__["window_sizes_small"] = _pyopenface.FaceModelParameters_window_sizes_small_get
    if _newclass:
        window_sizes_small = _swig_property(_pyopenface.FaceModelParameters_window_sizes_small_get, _pyopenface.FaceModelParameters_window_sizes_small_set)
    __swig_setmethods__["window_sizes_init"] = _pyopenface.FaceModelParameters_window_sizes_init_set
    __swig_getmethods__["window_sizes_init"] = _pyopenface.FaceModelParameters_window_sizes_init_get
    if _newclass:
        window_sizes_init = _swig_property(_pyopenface.FaceModelParameters_window_sizes_init_get, _pyopenface.FaceModelParameters_window_sizes_init_set)
    __swig_setmethods__["window_sizes_current"] = _pyopenface.FaceModelParameters_window_sizes_current_set
    __swig_getmethods__["window_sizes_current"] = _pyopenface.FaceModelParameters_window_sizes_current_get
    if _newclass:
        window_sizes_current = _swig_property(_pyopenface.FaceModelParameters_window_sizes_current_get, _pyopenface.FaceModelParameters_window_sizes_current_set)
    __swig_setmethods__["face_template_scale"] = _pyopenface.FaceModelParameters_face_template_scale_set
    __swig_getmethods__["face_template_scale"] = _pyopenface.FaceModelParameters_face_template_scale_get
    if _newclass:
        face_template_scale = _swig_property(_pyopenface.FaceModelParameters_face_template_scale_get, _pyopenface.FaceModelParameters_face_template_scale_set)
    __swig_setmethods__["use_face_template"] = _pyopenface.FaceModelParameters_use_face_template_set
    __swig_getmethods__["use_face_template"] = _pyopenface.FaceModelParameters_use_face_template_get
    if _newclass:
        use_face_template = _swig_property(_pyopenface.FaceModelParameters_use_face_template_get, _pyopenface.FaceModelParameters_use_face_template_set)
    __swig_setmethods__["model_location"] = _pyopenface.FaceModelParameters_model_location_set
    __swig_getmethods__["model_location"] = _pyopenface.FaceModelParameters_model_location_get
    if _newclass:
        model_location = _swig_property(_pyopenface.FaceModelParameters_model_location_get, _pyopenface.FaceModelParameters_model_location_set)
    __swig_setmethods__["sigma"] = _pyopenface.FaceModelParameters_sigma_set
    __swig_getmethods__["sigma"] = _pyopenface.FaceModelParameters_sigma_get
    if _newclass:
        sigma = _swig_property(_pyopenface.FaceModelParameters_sigma_get, _pyopenface.FaceModelParameters_sigma_set)
    __swig_setmethods__["reg_factor"] = _pyopenface.FaceModelParameters_reg_factor_set
    __swig_getmethods__["reg_factor"] = _pyopenface.FaceModelParameters_reg_factor_get
    if _newclass:
        reg_factor = _swig_property(_pyopenface.FaceModelParameters_reg_factor_get, _pyopenface.FaceModelParameters_reg_factor_set)
    __swig_setmethods__["weight_factor"] = _pyopenface.FaceModelParameters_weight_factor_set
    __swig_getmethods__["weight_factor"] = _pyopenface.FaceModelParameters_weight_factor_get
    if _newclass:
        weight_factor = _swig_property(_pyopenface.FaceModelParameters_weight_factor_get, _pyopenface.FaceModelParameters_weight_factor_set)
    __swig_setmethods__["multi_view"] = _pyopenface.FaceModelParameters_multi_view_set
    __swig_getmethods__["multi_view"] = _pyopenface.FaceModelParameters_multi_view_get
    if _newclass:
        multi_view = _swig_property(_pyopenface.FaceModelParameters_multi_view_get, _pyopenface.FaceModelParameters_multi_view_set)
    CLM_DETECTOR = _pyopenface.FaceModelParameters_CLM_DETECTOR
    CLNF_DETECTOR = _pyopenface.FaceModelParameters_CLNF_DETECTOR
    CECLM_DETECTOR = _pyopenface.FaceModelParameters_CECLM_DETECTOR
    __swig_setmethods__["curr_landmark_detector"] = _pyopenface.FaceModelParameters_curr_landmark_detector_set
    __swig_getmethods__["curr_landmark_detector"] = _pyopenface.FaceModelParameters_curr_landmark_detector_get
    if _newclass:
        curr_landmark_detector = _swig_property(_pyopenface.FaceModelParameters_curr_landmark_detector_get, _pyopenface.FaceModelParameters_curr_landmark_detector_set)
    __swig_setmethods__["reinit_video_every"] = _pyopenface.FaceModelParameters_reinit_video_every_set
    __swig_getmethods__["reinit_video_every"] = _pyopenface.FaceModelParameters_reinit_video_every_get
    if _newclass:
        reinit_video_every = _swig_property(_pyopenface.FaceModelParameters_reinit_video_every_get, _pyopenface.FaceModelParameters_reinit_video_every_set)
    HAAR_DETECTOR = _pyopenface.FaceModelParameters_HAAR_DETECTOR
    HOG_SVM_DETECTOR = _pyopenface.FaceModelParameters_HOG_SVM_DETECTOR
    MTCNN_DETECTOR = _pyopenface.FaceModelParameters_MTCNN_DETECTOR
    __swig_setmethods__["haar_face_detector_location"] = _pyopenface.FaceModelParameters_haar_face_detector_location_set
    __swig_getmethods__["haar_face_detector_location"] = _pyopenface.FaceModelParameters_haar_face_detector_location_get
    if _newclass:
        haar_face_detector_location = _swig_property(_pyopenface.FaceModelParameters_haar_face_detector_location_get, _pyopenface.FaceModelParameters_haar_face_detector_location_set)
    __swig_setmethods__["mtcnn_face_detector_location"] = _pyopenface.FaceModelParameters_mtcnn_face_detector_location_set
    __swig_getmethods__["mtcnn_face_detector_location"] = _pyopenface.FaceModelParameters_mtcnn_face_detector_location_get
    if _newclass:
        mtcnn_face_detector_location = _swig_property(_pyopenface.FaceModelParameters_mtcnn_face_detector_location_get, _pyopenface.FaceModelParameters_mtcnn_face_detector_location_set)
    __swig_setmethods__["curr_face_detector"] = _pyopenface.FaceModelParameters_curr_face_detector_set
    __swig_getmethods__["curr_face_detector"] = _pyopenface.FaceModelParameters_curr_face_detector_get
    if _newclass:
        curr_face_detector = _swig_property(_pyopenface.FaceModelParameters_curr_face_detector_get, _pyopenface.FaceModelParameters_curr_face_detector_set)
    __swig_setmethods__["refine_hierarchical"] = _pyopenface.FaceModelParameters_refine_hierarchical_set
    __swig_getmethods__["refine_hierarchical"] = _pyopenface.FaceModelParameters_refine_hierarchical_get
    if _newclass:
        refine_hierarchical = _swig_property(_pyopenface.FaceModelParameters_refine_hierarchical_get, _pyopenface.FaceModelParameters_refine_hierarchical_set)
    __swig_setmethods__["refine_parameters"] = _pyopenface.FaceModelParameters_refine_parameters_set
    __swig_getmethods__["refine_parameters"] = _pyopenface.FaceModelParameters_refine_parameters_get
    if _newclass:
        refine_parameters = _swig_property(_pyopenface.FaceModelParameters_refine_parameters_get, _pyopenface.FaceModelParameters_refine_parameters_set)

    def __init__(self, *args):
        this = _pyopenface.new_FaceModelParameters(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyopenface.delete_FaceModelParameters
    __del__ = lambda self: None
FaceModelParameters_swigregister = _pyopenface.FaceModelParameters_swigregister
FaceModelParameters_swigregister(FaceModelParameters)

class WCLNF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WCLNF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WCLNF, name)
    __repr__ = _swig_repr

    def __init__(self, model_location):
        this = _pyopenface.new_WCLNF(model_location)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def loaded_successfully(self):
        return _pyopenface.WCLNF_loaded_successfully(self)

    def detected_landmarks(self):
        return _pyopenface.WCLNF_detected_landmarks(self)

    def detection_certainty(self):
        return _pyopenface.WCLNF_detection_certainty(self)
    __swig_setmethods__["face_model"] = _pyopenface.WCLNF_face_model_set
    __swig_getmethods__["face_model"] = _pyopenface.WCLNF_face_model_get
    if _newclass:
        face_model = _swig_property(_pyopenface.WCLNF_face_model_get, _pyopenface.WCLNF_face_model_set)
    __swig_destroy__ = _pyopenface.delete_WCLNF
    __del__ = lambda self: None
WCLNF_swigregister = _pyopenface.WCLNF_swigregister
WCLNF_swigregister(WCLNF)


def DetectLandmarksInVideo(*args):
    return _pyopenface.DetectLandmarksInVideo(*args)
DetectLandmarksInVideo = _pyopenface.DetectLandmarksInVideo

def GetPose(clnf_model, fx, fy, cx, cy):
    return _pyopenface.GetPose(clnf_model, fx, fy, cx, cy)
GetPose = _pyopenface.GetPose

def print_numpy(*args):
    return _pyopenface.print_numpy(*args)
print_numpy = _pyopenface.print_numpy
# This file is compatible with both classic and new-style classes.


